{"version":3,"sources":["views/apps/calendar/Calendar.js","views/apps/calendar/SidebarLeft.js","views/apps/calendar/AddEventSidebar.js","views/apps/calendar/store/actions/index.js","views/apps/calendar/index.js","assets/images/pages/calendar-illustration.png"],"names":["ToastComponent","title","icon","color","className","size","Calendar","props","calendarRef","useRef","store","isRtl","dispatch","calendarsColor","calendarApi","setCalendarApi","handleAddEventSidebar","blankEvent","toggleSidebar","selectEvent","updateEvent","useEffect","current","getApi","calendarOptions","events","length","plugins","interactionPlugin","dayGridPlugin","timeGridPlugin","listPlugin","initialView","headerToolbar","start","end","editable","eventResizableFromStart","dragScroll","dayMaxEvents","navLinks","eventClassNames","calendarEvent","event","colorName","_def","extendedProps","calendar","eventClick","clickedEvent","customButtons","sidebarToggle","text","click","dateClick","info","ev","date","eventDrop","droppedEvent","toast","success","autoClose","hideProgressBar","closeButton","eventResize","resizedEvent","ref","direction","Card","CardBody","memo","filters","label","SidebarLeft","updateFilter","updateAllFilters","Button","Ripple","block","onClick","CustomInput","type","id","checked","selectedCalendars","onChange","e","target","map","filter","includes","classnames","src","illustration","alt","AddEventSidebar","open","refetchEvents","addEvent","removeEvent","selectedEvent","useForm","register","errors","handleSubmit","useState","url","setUrl","desc","setDesc","setTitle","guests","setGuests","allDay","setAllDay","location","setLocation","Date","endPicker","setEndPicker","startPicker","setStartPicker","value","setValue","guestsOptions","avatar","img1","img2","img3","img4","img5","img6","handleUpdateEvent","eventToUpdate","description","updatedEventData","propsToUpdate","extendedPropsToUpdate","existingEvent","getEventById","index","propName","setProp","setDates","setExtendedProp","updateEventInCalendar","handleDeleteEvent","eventId","remove","error","EventActions","isObjEmpty","outline","CloseBtn","Modal","isOpen","toggle","contentClassName","onOpened","onClosed","modalClassName","ModalHeader","close","tag","ModalBody","Form","onSubmit","data","obj","display","undefined","handleAddEvent","FormGroup","Label","for","Input","name","placeholder","innerRef","validate","options","theme","selectThemeColors","classNamePrefix","isClearable","components","Option","required","enableTime","dateFormat","inline","isMulti","img","rows","fetchEvents","calendars","axios","get","then","response","getState","post","delete","Business","Holiday","Personal","Family","ETC","CalendarComponent","useDispatch","useSelector","state","addSidebarOpen","setAddSidebarOpen","leftSidebarOpen","setLeftSidebarOpen","useRTL","val","Row","noGutters","Col","show"],"mappings":"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","file":"static/js/156.e6097ef4.chunk.js","sourcesContent":["// ** React Import\r\nimport { useEffect, useRef, memo, Fragment } from 'react'\r\n\r\n// ** Full Calendar & it's Plugins\r\nimport FullCalendar from '@fullcalendar/react'\r\nimport listPlugin from '@fullcalendar/list'\r\nimport dayGridPlugin from '@fullcalendar/daygrid'\r\nimport timeGridPlugin from '@fullcalendar/timegrid'\r\nimport interactionPlugin from '@fullcalendar/interaction'\r\n\r\n// ** Custom Components\r\nimport Avatar from '@components/avatar'\r\n\r\n// ** Third Party Components\r\nimport { toast } from 'react-toastify'\r\nimport { Card, CardBody } from 'reactstrap'\r\nimport { Menu, Check } from 'react-feather'\r\n\r\n// ** Toast Component\r\nconst ToastComponent = ({ title, icon, color }) => (\r\n  <Fragment>\r\n    <div className='toastify-header pb-0'>\r\n      <div className='title-wrapper'>\r\n        <Avatar size='sm' color={color} icon={icon} />\r\n        <h6 className='toast-title'>{title}</h6>\r\n      </div>\r\n    </div>\r\n  </Fragment>\r\n)\r\n\r\nconst Calendar = props => {\r\n  // ** Refs\r\n  const calendarRef = useRef(null)\r\n\r\n  // ** Props\r\n  const {\r\n    store,\r\n    isRtl,\r\n    dispatch,\r\n    calendarsColor,\r\n    calendarApi,\r\n    setCalendarApi,\r\n    handleAddEventSidebar,\r\n    blankEvent,\r\n    toggleSidebar,\r\n    selectEvent,\r\n    updateEvent\r\n  } = props\r\n\r\n  // ** UseEffect checks for CalendarAPI Update\r\n  useEffect(() => {\r\n    if (calendarApi === null) {\r\n      setCalendarApi(calendarRef.current.getApi())\r\n    }\r\n  }, [calendarApi])\r\n\r\n  // ** calendarOptions(Props)\r\n  const calendarOptions = {\r\n    events: store.events.length ? store.events : [],\r\n    plugins: [interactionPlugin, dayGridPlugin, timeGridPlugin, listPlugin],\r\n    initialView: 'dayGridMonth',\r\n    headerToolbar: {\r\n      start: 'sidebarToggle, prev,next, title',\r\n      end: 'dayGridMonth,timeGridWeek,timeGridDay,listMonth'\r\n    },\r\n    /*\r\n      Enable dragging and resizing event\r\n      ? Docs: https://fullcalendar.io/docs/editable\r\n    */\r\n    editable: true,\r\n\r\n    /*\r\n      Enable resizing event from start\r\n      ? Docs: https://fullcalendar.io/docs/eventResizableFromStart\r\n    */\r\n    eventResizableFromStart: true,\r\n\r\n    /*\r\n      Automatically scroll the scroll-containers during event drag-and-drop and date selecting\r\n      ? Docs: https://fullcalendar.io/docs/dragScroll\r\n    */\r\n    dragScroll: true,\r\n\r\n    /*\r\n      Max number of events within a given day\r\n      ? Docs: https://fullcalendar.io/docs/dayMaxEvents\r\n    */\r\n    dayMaxEvents: 2,\r\n\r\n    /*\r\n      Determines if day names and week names are clickable\r\n      ? Docs: https://fullcalendar.io/docs/navLinks\r\n    */\r\n    navLinks: true,\r\n\r\n    eventClassNames({ event: calendarEvent }) {\r\n      // eslint-disable-next-line no-underscore-dangle\r\n      const colorName = calendarsColor[calendarEvent._def.extendedProps.calendar]\r\n\r\n      return [\r\n        // Background Color\r\n        `bg-light-${colorName}`\r\n      ]\r\n    },\r\n\r\n    eventClick({ event: clickedEvent }) {\r\n      dispatch(selectEvent(clickedEvent))\r\n      handleAddEventSidebar()\r\n\r\n      // * Only grab required field otherwise it goes in infinity loop\r\n      // ! Always grab all fields rendered by form (even if it get `undefined`) otherwise due to Vue3/Composition API you might get: \"object is not extensible\"\r\n      // event.value = grabEventDataFromEventApi(clickedEvent)\r\n\r\n      // eslint-disable-next-line no-use-before-define\r\n      // isAddNewEventSidebarActive.value = true\r\n    },\r\n\r\n    customButtons: {\r\n      sidebarToggle: {\r\n        text: <Menu className='d-xl-none d-block' />,\r\n        click() {\r\n          toggleSidebar(true)\r\n        }\r\n      }\r\n    },\r\n\r\n    dateClick(info) {\r\n      const ev = blankEvent\r\n      ev.start = info.date\r\n      ev.end = info.date\r\n      dispatch(selectEvent(ev))\r\n      handleAddEventSidebar()\r\n    },\r\n\r\n    /*\r\n      Handle event drop (Also include dragged event)\r\n      ? Docs: https://fullcalendar.io/docs/eventDrop\r\n      ? We can use `eventDragStop` but it doesn't return updated event so we have to use `eventDrop` which returns updated event\r\n    */\r\n    eventDrop({ event: droppedEvent }) {\r\n      dispatch(updateEvent(droppedEvent))\r\n      toast.success(<ToastComponent title='Event Updated' color='success' icon={<Check />} />, {\r\n        autoClose: 2000,\r\n        hideProgressBar: true,\r\n        closeButton: false\r\n      })\r\n    },\r\n\r\n    /*\r\n      Handle event resize\r\n      ? Docs: https://fullcalendar.io/docs/eventResize\r\n    */\r\n    eventResize({ event: resizedEvent }) {\r\n      dispatch(updateEvent(resizedEvent))\r\n      toast.success(<ToastComponent title='Event Updated' color='success' icon={<Check />} />, {\r\n        autoClose: 2000,\r\n        hideProgressBar: true,\r\n        closeButton: false\r\n      })\r\n    },\r\n\r\n    ref: calendarRef,\r\n\r\n    // Get direction from app state (store)\r\n    direction: isRtl ? 'rtl' : 'ltr'\r\n  }\r\n\r\n  return (\r\n    <Card className='shadow-none border-0 mb-0 rounded-0'>\r\n      <CardBody className='pb-0'>\r\n        <FullCalendar {...calendarOptions} />{' '}\r\n      </CardBody>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default memo(Calendar)\r\n","// ** React Imports\nimport { Fragment } from 'react'\n\n// ** Custom Components\nimport classnames from 'classnames'\nimport { CardBody, Button, CustomInput } from 'reactstrap'\n\n// ** illustration import\nimport illustration from '@src/assets/images/pages/calendar-illustration.png'\n\n// ** Filters Checkbox Array\nconst filters = [\n  { label: 'Personal', color: 'danger', className: 'custom-control-danger mb-1' },\n  { label: 'Business', color: 'primary', className: 'custom-control-primary mb-1' },\n  { label: 'Family', color: 'warning', className: 'custom-control-warning mb-1' },\n  { label: 'Holiday', color: 'success', className: 'custom-control-success mb-1' },\n  { label: 'ETC', color: 'info', className: 'custom-control-info' }\n]\n\nconst SidebarLeft = props => {\n  // ** Props\n  const { handleAddEventSidebar, toggleSidebar, updateFilter, updateAllFilters, store, dispatch } = props\n\n  // ** Function to handle Add Event Click\n  const handleAddEventClick = () => {\n    toggleSidebar(false)\n    handleAddEventSidebar()\n  }\n\n  return (\n    <Fragment>\n      <div className='sidebar-wrapper'>\n        <CardBody className='card-body d-flex justify-content-center my-sm-0 mb-3'>\n          <Button.Ripple color='primary' block onClick={handleAddEventClick}>\n            <span className='align-middle'>Add Event</span>\n          </Button.Ripple>\n        </CardBody>\n        <CardBody>\n          <h5 className='section-label mb-1'>\n            <span className='align-middle'>Filter</span>\n          </h5>\n          <CustomInput\n            type='checkbox'\n            className='mb-1'\n            label='View All'\n            id='view-all'\n            checked={store.selectedCalendars.length === filters.length}\n            onChange={e => dispatch(updateAllFilters(e.target.checked))}\n          />\n          <div className='calendar-events-filter'>\n            {filters.length &&\n              filters.map(filter => {\n                return (\n                  <CustomInput\n                    type='checkbox'\n                    key={filter.label}\n                    id={filter.label}\n                    label={filter.label}\n                    checked={store.selectedCalendars.includes(filter.label)}\n                    className={classnames({\n                      [filter.className]: filter.className\n                    })}\n                    onChange={e => dispatch(updateFilter(filter.label))}\n                  />\n                )\n              })}\n          </div>\n        </CardBody>\n      </div>\n      <div className='mt-auto'>\n        <img className='img-fluid' src={illustration} alt='illustration' />\n      </div>\n    </Fragment>\n  )\n}\n\nexport default SidebarLeft\n","// ** React Imports\r\nimport { Fragment, useState } from 'react'\r\n\r\n// ** Custom Components\r\nimport Avatar from '@components/avatar'\r\n\r\n// ** Third Party Components\r\nimport classnames from 'classnames'\r\nimport { toast } from 'react-toastify'\r\nimport Flatpickr from 'react-flatpickr'\r\nimport { X, Check, Trash } from 'react-feather'\r\nimport Select, { components } from 'react-select'\r\nimport { useForm, Controller } from 'react-hook-form'\r\nimport { Button, Modal, ModalHeader, ModalBody, FormGroup, Label, CustomInput, Input, Form } from 'reactstrap'\r\n\r\n// ** Utils\r\nimport { selectThemeColors, isObjEmpty } from '@utils'\r\n\r\n// ** Avatar Images\r\nimport img1 from '@src/assets/images/avatars/1-small.png'\r\nimport img2 from '@src/assets/images/avatars/3-small.png'\r\nimport img3 from '@src/assets/images/avatars/5-small.png'\r\nimport img4 from '@src/assets/images/avatars/7-small.png'\r\nimport img5 from '@src/assets/images/avatars/9-small.png'\r\nimport img6 from '@src/assets/images/avatars/11-small.png'\r\n\r\n// ** Styles Imports\r\nimport '@styles/react/libs/react-select/_react-select.scss'\r\nimport '@styles/react/libs/flatpickr/flatpickr.scss'\r\n\r\n// ** Toast Component\r\nconst ToastComponent = ({ title, icon, color }) => (\r\n  <Fragment>\r\n    <div className='toastify-header pb-0'>\r\n      <div className='title-wrapper'>\r\n        <Avatar size='sm' color={color} icon={icon} />\r\n        <h6 className='toast-title'>{title}</h6>\r\n      </div>\r\n    </div>\r\n  </Fragment>\r\n)\r\n\r\nconst AddEventSidebar = props => {\r\n  // ** Props\r\n  const {\r\n    store,\r\n    dispatch,\r\n    open,\r\n    handleAddEventSidebar,\r\n    calendarsColor,\r\n    calendarApi,\r\n    refetchEvents,\r\n    addEvent,\r\n    selectEvent,\r\n    updateEvent,\r\n    removeEvent\r\n  } = props\r\n\r\n  // ** Vars\r\n  const selectedEvent = store.selectedEvent\r\n  const { register, errors, handleSubmit } = useForm()\r\n\r\n  // ** States\r\n  const [url, setUrl] = useState('')\r\n  const [desc, setDesc] = useState('')\r\n  const [title, setTitle] = useState('')\r\n  const [guests, setGuests] = useState({})\r\n  const [allDay, setAllDay] = useState(false)\r\n  const [location, setLocation] = useState('')\r\n  const [endPicker, setEndPicker] = useState(new Date())\r\n  const [startPicker, setStartPicker] = useState(new Date())\r\n  const [value, setValue] = useState([{ value: 'Business', label: 'Business', color: 'primary' }])\r\n\r\n  // ** Select Options\r\n  const options = [\r\n    { value: 'Business', label: 'Business', color: 'primary' },\r\n    { value: 'Personal', label: 'Personal', color: 'danger' },\r\n    { value: 'Family', label: 'Family', color: 'warning' },\r\n    { value: 'Holiday', label: 'Holiday', color: 'success' },\r\n    { value: 'ETC', label: 'ETC', color: 'info' }\r\n  ]\r\n\r\n  const guestsOptions = [\r\n    { value: 'Donna Frank', label: 'Donna Frank', avatar: img1 },\r\n    { value: 'Jane Foster', label: 'Jane Foster', avatar: img2 },\r\n    { value: 'Gabrielle Robertson', label: 'Gabrielle Robertson', avatar: img3 },\r\n    { value: 'Lori Spears', label: 'Lori Spears', avatar: img4 },\r\n    { value: 'Sandy Vega', label: 'Sandy Vega', avatar: img5 },\r\n    { value: 'Cheryl May', label: 'Cheryl May', avatar: img6 }\r\n  ]\r\n\r\n  // ** Custom select components\r\n  const OptionComponent = ({ data, ...props }) => {\r\n    return (\r\n      <components.Option {...props}>\r\n        <span className={`bullet bullet-${data.color} bullet-sm mr-50`}></span>\r\n        {data.label}\r\n      </components.Option>\r\n    )\r\n  }\r\n\r\n  const GuestsComponent = ({ data, ...props }) => {\r\n    return (\r\n      <components.Option {...props}>\r\n        <div className='d-flex flex-wrap align-items-center'>\r\n          <Avatar className='my-0 mr-1' size='sm' img={data.avatar} />\r\n          <div>{data.label}</div>\r\n        </div>\r\n      </components.Option>\r\n    )\r\n  }\r\n\r\n  // ** Adds New Event\r\n  const handleAddEvent = () => {\r\n    const obj = {\r\n      title,\r\n      start: startPicker,\r\n      end: endPicker,\r\n      allDay,\r\n      display: 'block',\r\n      extendedProps: {\r\n        calendar: value[0].label,\r\n        url: url.length ? url : undefined,\r\n        guests: guests.length ? guests : undefined,\r\n        location: location.length ? location : undefined,\r\n        desc: desc.length ? desc : undefined\r\n      }\r\n    }\r\n    dispatch(addEvent(obj))\r\n    refetchEvents()\r\n    handleAddEventSidebar()\r\n    toast.success(<ToastComponent title='Event Added' color='success' icon={<Check />} />, {\r\n      autoClose: 2000,\r\n      hideProgressBar: true,\r\n      closeButton: false\r\n    })\r\n  }\r\n\r\n  // ** Reset Input Values on Close\r\n  const handleResetInputValues = () => {\r\n    dispatch(selectEvent({}))\r\n    setTitle('')\r\n    setAllDay(false)\r\n    setUrl('')\r\n    setLocation('')\r\n    setDesc('')\r\n    setGuests({})\r\n    setValue([{ value: 'Business', label: 'Business', color: 'primary' }])\r\n    setStartPicker(new Date())\r\n    setEndPicker(new Date())\r\n  }\r\n\r\n  // ** Set sidebar fields\r\n  const handleSelectedEvent = () => {\r\n    if (!isObjEmpty(selectedEvent)) {\r\n      const calendar = selectedEvent.extendedProps.calendar\r\n\r\n      const resolveLabel = () => {\r\n        if (calendar.length) {\r\n          return { label: calendar, value: calendar, color: calendarsColor[calendar] }\r\n        } else {\r\n          return { value: 'Business', label: 'Business', color: 'primary' }\r\n        }\r\n      }\r\n      setTitle(selectedEvent.title || title)\r\n      setAllDay(selectedEvent.allDay || allDay)\r\n      setUrl(selectedEvent.url || url)\r\n      setLocation(selectedEvent.extendedProps.location || location)\r\n      setDesc(selectedEvent.extendedProps.description || desc)\r\n      setGuests(selectedEvent.extendedProps.guests || guests)\r\n      setStartPicker(new Date(selectedEvent.start))\r\n      setEndPicker(selectedEvent.allDay ? new Date(selectedEvent.start) : new Date(selectedEvent.end))\r\n      setValue([resolveLabel()])\r\n    }\r\n  }\r\n\r\n  // ** (UI) updateEventInCalendar\r\n  const updateEventInCalendar = (updatedEventData, propsToUpdate, extendedPropsToUpdate) => {\r\n    const existingEvent = calendarApi.getEventById(updatedEventData.id)\r\n\r\n    // ** Set event properties except date related\r\n    // ? Docs: https://fullcalendar.io/docs/Event-setProp\r\n    // ** dateRelatedProps => ['start', 'end', 'allDay']\r\n    // ** eslint-disable-next-line no-plusplus\r\n    for (let index = 0; index < propsToUpdate.length; index++) {\r\n      const propName = propsToUpdate[index]\r\n      existingEvent.setProp(propName, updatedEventData[propName])\r\n    }\r\n\r\n    // ** Set date related props\r\n    // ? Docs: https://fullcalendar.io/docs/Event-setDates\r\n    existingEvent.setDates(updatedEventData.start, updatedEventData.end, { allDay: updatedEventData.allDay })\r\n\r\n    // ** Set event's extendedProps\r\n    // ? Docs: https://fullcalendar.io/docs/Event-setExtendedProp\r\n    // ** eslint-disable-next-line no-plusplus\r\n    for (let index = 0; index < extendedPropsToUpdate.length; index++) {\r\n      const propName = extendedPropsToUpdate[index]\r\n      existingEvent.setExtendedProp(propName, updatedEventData.extendedProps[propName])\r\n    }\r\n  }\r\n\r\n  // ** Updates Event in Store\r\n  const handleUpdateEvent = () => {\r\n    const eventToUpdate = {\r\n      id: selectedEvent.id,\r\n      title,\r\n      allDay,\r\n      start: startPicker,\r\n      end: endPicker,\r\n      url,\r\n      extendedProps: {\r\n        location,\r\n        description: desc,\r\n        guests,\r\n        calendar: value[0].label\r\n      }\r\n    }\r\n\r\n    const propsToUpdate = ['id', 'title', 'url']\r\n    const extendedPropsToUpdate = ['calendar', 'guests', 'location', 'description']\r\n\r\n    dispatch(updateEvent(eventToUpdate))\r\n    updateEventInCalendar(eventToUpdate, propsToUpdate, extendedPropsToUpdate)\r\n    handleAddEventSidebar()\r\n    toast.success(<ToastComponent title='Event Updated' color='success' icon={<Check />} />, {\r\n      autoClose: 2000,\r\n      hideProgressBar: true,\r\n      closeButton: false\r\n    })\r\n  }\r\n\r\n  // ** (UI) removeEventInCalendar\r\n  const removeEventInCalendar = eventId => {\r\n    calendarApi.getEventById(eventId).remove()\r\n  }\r\n  const handleDeleteEvent = () => {\r\n    dispatch(removeEvent(selectedEvent.id))\r\n    removeEventInCalendar(selectedEvent.id)\r\n    handleAddEventSidebar()\r\n    toast.error(<ToastComponent title='Event Removed' color='danger' icon={<Trash />} />, {\r\n      autoClose: 2000,\r\n      hideProgressBar: true,\r\n      closeButton: false\r\n    })\r\n  }\r\n\r\n  // ** Event Action buttons\r\n  const EventActions = () => {\r\n    if (isObjEmpty(selectedEvent) || (!isObjEmpty(selectedEvent) && !selectedEvent.title.length)) {\r\n      return (\r\n        <Fragment>\r\n          <Button.Ripple className='mr-1' type='submit' color='primary'>\r\n            Add\r\n          </Button.Ripple>\r\n          <Button.Ripple color='secondary' type='reset' onClick={handleAddEventSidebar} outline>\r\n            Cancel\r\n          </Button.Ripple>\r\n        </Fragment>\r\n      )\r\n    } else {\r\n      return (\r\n        <Fragment>\r\n          <Button.Ripple\r\n            className='mr-1'\r\n            color='primary'\r\n            // onClick={handleUpdateEvent}\r\n          >\r\n            Update\r\n          </Button.Ripple>\r\n          <Button.Ripple color='danger' onClick={handleDeleteEvent} outline>\r\n            Delete\r\n          </Button.Ripple>\r\n        </Fragment>\r\n      )\r\n    }\r\n  }\r\n\r\n  // ** Close BTN\r\n  const CloseBtn = <X className='cursor-pointer' size={15} onClick={handleAddEventSidebar} />\r\n\r\n  return (\r\n    <Modal\r\n      isOpen={open}\r\n      toggle={handleAddEventSidebar}\r\n      className='sidebar-lg'\r\n      contentClassName='p-0'\r\n      onOpened={handleSelectedEvent}\r\n      onClosed={handleResetInputValues}\r\n      modalClassName='modal-slide-in event-sidebar'\r\n    >\r\n      <ModalHeader className='mb-1' toggle={handleAddEventSidebar} close={CloseBtn} tag='div'>\r\n        <h5 className='modal-title'>\r\n          {selectedEvent && selectedEvent.title && selectedEvent.title.length ? 'Update' : 'Add'} Event\r\n        </h5>\r\n      </ModalHeader>\r\n      <ModalBody className='flex-grow-1 pb-sm-0 pb-3'>\r\n        <Form\r\n          onSubmit={handleSubmit(data => {\r\n            if (isObjEmpty(errors)) {\r\n              if (isObjEmpty(selectedEvent) || (!isObjEmpty(selectedEvent) && !selectedEvent.title.length)) {\r\n                handleAddEvent()\r\n              } else {\r\n                handleUpdateEvent()\r\n              }\r\n              handleAddEventSidebar()\r\n            }\r\n          })}\r\n        >\r\n          <FormGroup>\r\n            <Label for='title'>\r\n              Title <span className='text-danger'>*</span>\r\n            </Label>\r\n            <Input\r\n              id='title'\r\n              name='title'\r\n              placeholder='Title'\r\n              value={title}\r\n              onChange={e => setTitle(e.target.value)}\r\n              innerRef={register({ register: true, validate: value => value !== '' })}\r\n              className={classnames({\r\n                'is-invalid': errors.title\r\n              })}\r\n            />\r\n          </FormGroup>\r\n\r\n          <FormGroup>\r\n            <Label for='label'>Label</Label>\r\n            <Select\r\n              id='label'\r\n              value={value}\r\n              options={options}\r\n              theme={selectThemeColors}\r\n              className='react-select'\r\n              classNamePrefix='select'\r\n              isClearable={false}\r\n              onChange={data => setValue([data])}\r\n              components={{\r\n                Option: OptionComponent\r\n              }}\r\n            />\r\n          </FormGroup>\r\n\r\n          <FormGroup>\r\n            <Label for='startDate'>Start Date</Label>\r\n            <Flatpickr\r\n              required\r\n              id='startDate'\r\n              // tag={Flatpickr}\r\n              name='startDate'\r\n              className='form-control'\r\n              onChange={date => setStartPicker(date[0])}\r\n              value={startPicker}\r\n              options={{\r\n                enableTime: allDay === false,\r\n                dateFormat: 'Y-m-d H:i'\r\n              }}\r\n            />\r\n          </FormGroup>\r\n\r\n          <FormGroup>\r\n            <Label for='endDate'>End Date</Label>\r\n            <Flatpickr\r\n              required\r\n              id='endDate'\r\n              // tag={Flatpickr}\r\n              name='endDate'\r\n              className='form-control'\r\n              onChange={date => setEndPicker(date[0])}\r\n              value={endPicker}\r\n              options={{\r\n                enableTime: allDay === false,\r\n                dateFormat: 'Y-m-d H:i'\r\n              }}\r\n            />\r\n          </FormGroup>\r\n\r\n          <FormGroup>\r\n            <CustomInput\r\n              type='switch'\r\n              id='allDay'\r\n              name='customSwitch'\r\n              label='All Day'\r\n              checked={allDay}\r\n              onChange={e => setAllDay(e.target.checked)}\r\n              inline\r\n            />\r\n          </FormGroup>\r\n\r\n          <FormGroup>\r\n            <Label for='eventURL'>Event URL</Label>\r\n            <Input\r\n              type='url'\r\n              id='eventURL'\r\n              value={url}\r\n              onChange={e => setUrl(e.target.value)}\r\n              placeholder='https://www.google.com'\r\n            />\r\n          </FormGroup>\r\n\r\n          <FormGroup>\r\n            <Label for='guests'>Guests</Label>\r\n            <Select\r\n              isMulti\r\n              id='guests'\r\n              className='react-select'\r\n              classNamePrefix='select'\r\n              isClearable={false}\r\n              options={guestsOptions}\r\n              theme={selectThemeColors}\r\n              value={guests.length ? [...guests] : null}\r\n              onChange={data => setGuests([...data])}\r\n              components={{\r\n                Option: GuestsComponent\r\n              }}\r\n            />\r\n          </FormGroup>\r\n\r\n          <FormGroup>\r\n            <Label for='location'>Location</Label>\r\n            <Input id='location' value={location} onChange={e => setLocation(e.target.value)} placeholder='Office' />\r\n          </FormGroup>\r\n\r\n          <FormGroup>\r\n            <Label for='description'>Description</Label>\r\n            <Input\r\n              type='textarea'\r\n              name='text'\r\n              id='description'\r\n              rows='3'\r\n              value={desc}\r\n              onChange={e => setDesc(e.target.value)}\r\n              placeholder='Description'\r\n            />\r\n          </FormGroup>\r\n          <FormGroup className='d-flex'>\r\n            <EventActions />\r\n          </FormGroup>\r\n        </Form>\r\n      </ModalBody>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default AddEventSidebar\r\n","import axios from 'axios'\n\n// ** Fetch Events\nexport const fetchEvents = calendars => {\n  return dispatch => {\n    axios.get('/apps/calendar/events', { calendars }).then(response => {\n      dispatch({\n        type: 'FETCH_EVENTS',\n        events: response.data\n      })\n    })\n  }\n}\n\n// ** Add Event\nexport const addEvent = event => {\n  return (dispatch, getState) => {\n    axios.post('/apps/calendar/add-event', { event }).then(() => {\n      dispatch({\n        type: 'ADD_EVENT'\n      })\n      dispatch(fetchEvents(getState().calendar.selectedCalendars))\n    })\n  }\n}\n\n// ** Update Event\nexport const updateEvent = event => {\n  return dispatch => {\n    axios.post('/apps/calendar/update-event', { event }).then(() => {\n      dispatch({\n        type: 'UPDATE_EVENT'\n      })\n    })\n  }\n}\n\n// ** Filter Events\nexport const updateFilter = filter => {\n  return (dispatch, getState) => {\n    dispatch({\n      type: 'UPDATE_FILTERS',\n      filter\n    })\n    dispatch(fetchEvents(getState().calendar.selectedCalendars))\n  }\n}\n\n// ** Add/Remove All Filters\nexport const updateAllFilters = value => {\n  return (dispatch, getState) => {\n    dispatch({\n      type: 'UPDATE_ALL_FILTERS',\n      value\n    })\n    dispatch(fetchEvents(getState().calendar.selectedCalendars))\n  }\n}\n\n// ** remove Event\nexport const removeEvent = id => {\n  return dispatch => {\n    axios.delete('/apps/calendar/remove-event', { id }).then(() => {\n      dispatch({\n        type: 'REMOVE_EVENT'\n      })\n    })\n  }\n}\n\n// ** Select Event (get event data on click)\nexport const selectEvent = event => {\n  return dispatch => {\n    dispatch({\n      type: 'SELECT_EVENT',\n      event\n    })\n  }\n}\n","// ** React Imports\nimport { Fragment, useState, useEffect } from 'react'\n\n// ** Third Party Components\nimport classnames from 'classnames'\nimport { Row, Col } from 'reactstrap'\n\n// ** Calendar App Component Imports\nimport Calendar from './Calendar'\nimport SidebarLeft from './SidebarLeft'\nimport AddEventSidebar from './AddEventSidebar'\n\n// ** Custom Hooks\nimport { useRTL } from '@hooks/useRTL'\n\n// ** Store & Actions\nimport { useSelector, useDispatch } from 'react-redux'\nimport {\n  fetchEvents,\n  selectEvent,\n  updateEvent,\n  updateFilter,\n  updateAllFilters,\n  addEvent,\n  removeEvent\n} from './store/actions/index'\n\n// ** Styles\nimport '@styles/react/apps/app-calendar.scss'\n\n// ** CalendarColors\nconst calendarsColor = {\n  Business: 'primary',\n  Holiday: 'success',\n  Personal: 'danger',\n  Family: 'warning',\n  ETC: 'info'\n}\n\nconst CalendarComponent = () => {\n  // ** Variables\n  const dispatch = useDispatch()\n  const store = useSelector(state => state.calendar)\n\n  // ** states\n  const [addSidebarOpen, setAddSidebarOpen] = useState(false),\n    [leftSidebarOpen, setLeftSidebarOpen] = useState(false),\n    [calendarApi, setCalendarApi] = useState(null)\n\n  // ** Hooks\n  const [isRtl, setIsRtl] = useRTL()\n\n  // ** AddEventSidebar Toggle Function\n  const handleAddEventSidebar = () => setAddSidebarOpen(!addSidebarOpen)\n\n  // ** LeftSidebar Toggle Function\n  const toggleSidebar = val => setLeftSidebarOpen(val)\n\n  // ** Blank Event Object\n  const blankEvent = {\n    title: '',\n    start: '',\n    end: '',\n    allDay: false,\n    url: '',\n    extendedProps: {\n      calendar: '',\n      guests: [],\n      location: '',\n      description: ''\n    }\n  }\n\n  // ** refetchEvents\n  const refetchEvents = () => {\n    if (calendarApi !== null) {\n      calendarApi.refetchEvents()\n    }\n  }\n\n  // ** Fetch Events On Mount\n  useEffect(() => {\n    dispatch(fetchEvents(store.selectedCalendars))\n  }, [])\n\n  return (\n    <Fragment>\n      <div className='app-calendar overflow-hidden border'>\n        <Row noGutters>\n          <Col\n            id='app-calendar-sidebar'\n            className={classnames('col app-calendar-sidebar flex-grow-0 overflow-hidden d-flex flex-column', {\n              show: leftSidebarOpen\n            })}\n          >\n            <SidebarLeft\n              store={store}\n              dispatch={dispatch}\n              updateFilter={updateFilter}\n              toggleSidebar={toggleSidebar}\n              updateAllFilters={updateAllFilters}\n              handleAddEventSidebar={handleAddEventSidebar}\n            />\n          </Col>\n          <Col className='position-relative'>\n            <Calendar\n              isRtl={isRtl}\n              store={store}\n              dispatch={dispatch}\n              blankEvent={blankEvent}\n              calendarApi={calendarApi}\n              selectEvent={selectEvent}\n              updateEvent={updateEvent}\n              toggleSidebar={toggleSidebar}\n              calendarsColor={calendarsColor}\n              setCalendarApi={setCalendarApi}\n              handleAddEventSidebar={handleAddEventSidebar}\n            />\n          </Col>\n          <div\n            className={classnames('body-content-overlay', {\n              show: leftSidebarOpen === true\n            })}\n            onClick={() => toggleSidebar(false)}\n          ></div>\n        </Row>\n      </div>\n      <AddEventSidebar\n        store={store}\n        dispatch={dispatch}\n        addEvent={addEvent}\n        open={addSidebarOpen}\n        selectEvent={selectEvent}\n        updateEvent={updateEvent}\n        removeEvent={removeEvent}\n        calendarApi={calendarApi}\n        refetchEvents={refetchEvents}\n        calendarsColor={calendarsColor}\n        handleAddEventSidebar={handleAddEventSidebar}\n      />\n    </Fragment>\n  )\n}\n\nexport default CalendarComponent\n","export default __webpack_public_path__ + \"static/media/calendar-illustration.42be42ce.png\";"],"sourceRoot":""}